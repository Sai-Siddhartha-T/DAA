#include <iostream>
#include <stdio.h>
using namespace std;

int solutionCount = 0;

// Function to print the board
void printBoard(char board[20][20], int n) {
    solutionCount++;
    cout << "Solution " << solutionCount << ":\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
}

// Recursive backtracking function
void solve(int row, int n, char board[20][20],
           int cols[20], int leftDiag[40], int rightDiag[40]) {
    // Base case: If all queens are placed
    if (row == n) {
        printBoard(board, n);
        return;
    }

    // Try placing queen in each column of current row
    for (int col = 0; col < n; col++) {
        if (cols[col] || leftDiag[row - col + n - 1] || rightDiag[row + col])
            continue; // Not safe

        // Place queen
        board[row][col] = 'Q';
        cols[col] = leftDiag[row - col + n - 1] = rightDiag[row + col] = 1;

        // Recurse for next row
        solve(row + 1, n, board, cols, leftDiag, rightDiag);

        // Backtrack
        board[row][col] = '.';
        cols[col] = leftDiag[row - col + n - 1] = rightDiag[row + col] = 0;
    }
}

int main() {
    int n;
    cout << "Enter number of queens: ";
    cin >> n;

    char board[20][20];
    int cols[20] = {0}, leftDiag[40] = {0}, rightDiag[40] = {0};

    // Initialize board with '.'
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            board[i][j] = '.';

    solve(0, n, board, cols, leftDiag, rightDiag);

    if (solutionCount == 0)
        cout << "No solution exists for " << n << "-Queens." << endl;
    else
        cout << "Total solutions found: " << solutionCount << endl;

    return 0;
}
